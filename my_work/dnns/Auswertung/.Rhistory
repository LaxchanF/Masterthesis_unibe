prototype_csv <- paste0(data_from, "/", prototype) # build paths to each file
prototype_files <- map(prototype_csv, \(x) read_csv(x)) # Map every csv data to a list
names(prototype_files) <- gsub("\\.csv$", "", prototype) # Name list of data according
diverse_training <- map(diverse_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
diverse_training_sliced <- map(diverse_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
diverse_train_epoch_avg <- map(diverse_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_testing <- map(diverse_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
diverse_testing_sliced <- map(diverse_testing, \(x) slice(x, max(trials)))
diverse_test_epoch_avg <- map(diverse_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_training <- map(prototype_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
prototype_training_sliced <- map(prototype_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
prototype_train_epoch_avg <- map(prototype_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_testing <- map(prototype_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
prototype_testing_sliced <- map(prototype_testing, \(x) slice(x, max(trials)))
prototype_test_epoch_avg <- map(prototype_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_flat_train_epoch_avg <- diverse_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_training <- ggplot(diverse_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position="none")
diverse_flat_test_epoch_avg <- diverse_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_test <- ggplot(diverse_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position="none")
prototype_flat_train_epoch_avg <- prototype_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_training <- ggplot(prototype_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position="none")
prototype_flat_test_epoch_avg <- prototype_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position="none")
prototype_across_test
prototype_flat_train_epoch_avg
prototype_across_test
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position=)
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position=)
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))+
theme(legend.position)
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_across_test
diverse_flat_train_epoch_avg <- diverse_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_training <- ggplot(diverse_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_flat_test_epoch_avg <- diverse_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_test <- ggplot(diverse_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_train_epoch_avg <- prototype_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_training <- ggplot(prototype_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_test_epoch_avg <- prototype_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_across_training
prototype_across_test
prototype_across_test
prototype_across_train
prototype_across_training```
### Prototype
```{r}
prototype_across_training
knitr::opts_chunk$set(echo = TRUE)
diverse_across_training
diverse_flat_train_epoch_avg
prototype_files
names(prototype_files) <- gsub("\\prototype.csv$", "", prototype) # Name list of data according
prototype_files
names(prototype_files) <- gsub("\\_prototype.csv$", "", prototype) # Name list of data according
prototype_files
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(gtsummary)
diverse <-  dir(path = data_from,
pattern="*diverse.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
library(tidyverse)
library(gridExtra)
library(here)
library(gtsummary)
diverse <-  dir(path = data_from,
pattern="*diverse.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(gtsummary)
here() # shows the path we are at currently
data_from <- here("my_work", "dnns", "Auswertung") #Build path to the data you want to plot
diverse <-  dir(path = data_from,
pattern="*diverse.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
diverse_csv <- paste0(data_from, "/", diverse) # build paths to each file
diverse_files <- map(diverse_csv, \(x) read_csv(x)) # Map every csv data to a list
names(diverse_files) <- gsub("\\_diverse.csv$", "", diverse) # Name list of data according
diverse_files
prototype <-  dir(path = data_from,
pattern="*prototype.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
prototype_csv <- paste0(data_from, "/", prototype) # build paths to each file
prototype_files <- map(prototype_csv, \(x) read_csv(x)) # Map every csv data to a list
names(prototype_files) <- gsub("\\_prototype.csv$", "", prototype) # Name list of data according
diverse_training <- map(diverse_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
diverse_training_sliced <- map(diverse_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
diverse_train_epoch_avg <- map(diverse_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_testing <- map(diverse_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
diverse_testing_sliced <- map(diverse_testing, \(x) slice(x, max(trials)))
diverse_test_epoch_avg <- map(diverse_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_training <- map(prototype_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
prototype_training_sliced <- map(prototype_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
prototype_train_epoch_avg <- map(prototype_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_testing <- map(prototype_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
prototype_testing_sliced <- map(prototype_testing, \(x) slice(x, max(trials)))
prototype_test_epoch_avg <- map(prototype_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_flat_train_epoch_avg <- diverse_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_training <- ggplot(diverse_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_flat_test_epoch_avg <- diverse_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_test <- ggplot(diverse_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_train_epoch_avg <- prototype_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_training <- ggplot(prototype_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_test_epoch_avg <- prototype_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_across_training
prototype_across_training
diverse_across_test
prototype_across_test
library(patchwork)
wrap_plots(Training_accuracy_plots) %>%
ggsave(filename="Training_accuracy_plots.png",
height = 40,
width = 40,
units = "cm") #hier Name ändern
diverse_across_training
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(gtsummary)
here() # shows the path we are at currently
data_from <- here("my_work", "dnns", "Auswertung") #Build path to the data you want to plot
diverse <-  dir(path = data_from,
pattern="*diverse.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
diverse_csv <- paste0(data_from, "/", diverse) # build paths to each file
diverse_files <- map(diverse_csv, \(x) read_csv(x)) # Map every csv data to a list
names(diverse_files) <- gsub("\\_diverse.csv$", "", diverse) # Name list of data according
diverse_files
prototype <-  dir(path = data_from,
pattern="*prototype.csv$") #double backslash to make dot match literal dot (default dot= any), $ matches end
prototype_csv <- paste0(data_from, "/", prototype) # build paths to each file
prototype_files <- map(prototype_csv, \(x) read_csv(x)) # Map every csv data to a list
names(prototype_files) <- gsub("\\_prototype.csv$", "", prototype) # Name list of data according
diverse_training <- map(diverse_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
diverse_training_sliced <- map(diverse_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
diverse_train_epoch_avg <- map(diverse_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_testing <- map(diverse_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
diverse_testing_sliced <- map(diverse_testing, \(x) slice(x, max(trials)))
diverse_test_epoch_avg <- map(diverse_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_training <- map(prototype_files, \(x) filter(x, phase=="train") %>% #Extract training Data
group_by(run, epoch) %>% #Group dataset into 20 runs and in every run make groups of 6 because of epochs
mutate(hit = if_else(ground_truth == prediction, 1, 0), # 1 if Predictions is equal to ground truth, else 0
nr_of_hits_in_this_epoch= cumsum(hit == 1), # Count right predicions on the go
trials= seq_along(along.with = epoch), # Count number of pictures shown to architecture in respective epoch
running_percentage = nr_of_hits_in_this_epoch/trials, # Calculate acuracy after each picture
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials))) # Calculate avg accuracy in each epoch
prototype_training_sliced <- map(prototype_training, \(x) slice(x, max(trials))) #slicing last computed accuracy per epoch
prototype_train_epoch_avg <- map(prototype_training_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
prototype_testing <- map(prototype_files, \(x) filter(x, phase=="test") %>%
group_by(run, epoch) %>%
mutate(hit = if_else(ground_truth == prediction, 1, 0),
nr_of_hits_in_this_epoch= cumsum(hit == 1),
trials= seq_along(along.with = epoch),
running_percentage = nr_of_hits_in_this_epoch/trials,
percentage_epochs = max(nr_of_hits_in_this_epoch) / max(trials)))
prototype_testing_sliced <- map(prototype_testing, \(x) slice(x, max(trials)))
prototype_test_epoch_avg <- map(prototype_testing_sliced, \(x) select(x, run, epoch, percentage_epochs) %>%
group_by(epoch) %>%
mutate(avg = mean(percentage_epochs)) %>% select(epoch, avg) %>%
unique())
diverse_flat_train_epoch_avg <- diverse_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_training <- ggplot(diverse_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training: Diverse"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_flat_test_epoch_avg <- diverse_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
diverse_across_test <- ggplot(diverse_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing: Diverse"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_train_epoch_avg <- prototype_train_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_training <- ggplot(prototype_flat_train_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Training: Prototype"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
prototype_flat_test_epoch_avg <- prototype_test_epoch_avg %>%
imap_dfr(~ tibble(
model = .y,
epoch = .x$epoch,
accuracy = .x$avg
))
prototype_across_test <- ggplot(prototype_flat_test_epoch_avg, aes(x= as.factor(epoch), y = accuracy, colour = as.factor(model), group = model)) +
geom_point(size = 3)+
geom_line()+
geom_hline(yintercept = 1/3, colour = "black", size = 1)+
theme_bw()+
labs(title = paste0("DNN Testing: Prototype"))+
xlab(label = "Epoch")+
ylab(label = "Accuracy")+
scale_y_continuous(expand = c(0, 0), limits = c(0,1.1))
diverse_across_training
diverse_across_training
