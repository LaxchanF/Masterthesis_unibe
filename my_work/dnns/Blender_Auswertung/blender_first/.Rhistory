#nest into 20 lists for each run
epochs <- testdaten %>% group_by(epoch) %>% mutate(trial = seq_along(epoch)) %>%
nest()
epochs$data
knitr::opts_chunk$set(echo = TRUE)
epochs$data %>% slice_tail
knitr::opts_chunk$set(echo = TRUE)
epochs$data[1] %>% slice_tail
knitr::opts_chunk$set(echo = TRUE)
epochs$data
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
accuracy = max(nr_hits)/max(trial)) %>% slice_tail())
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x)                              mutate(nr_hits = cumsum(hit),
accuracy = max(nr_hits)/max(trial)) %>% slice_tail())
knitr::opts_chunk$set(echo = TRUE)
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x) mutate(nr_hits = cumsum(hit),
accuracy = max(nr_hits)/max(trial)) %>% slice_tail())
knitr::opts_chunk$set(echo = TRUE)
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial)))
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
testdaten
knitr::opts_chunk$set(echo = TRUE)
testdaten %>% filter(run == 1)
knitr::opts_chunk$set(echo = TRUE)
testKlein <- testdaten %>% filter(run == 1)
knitr::opts_chunk$set(echo = TRUE)
testKlein
knitr::opts_chunk$set(echo = TRUE)
accuracy = max(nr_hits)/max(trial)
knitr::opts_chunk$set(echo = TRUE)
testKlein
knitr::opts_chunk$set(echo = TRUE)
testKlein
knitr::opts_chunk$set(echo = TRUE)
testKlein <- testdaten %>% filter(run == 1)
testKlein %>%  mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein <- testdaten %>% filter(run == 1)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial)) %>%
filter(epoch == 3)
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial)) %>% slice_tail()
testdaten
knitr::opts_chunk$set(echo = TRUE)
testKlein <- testdaten %>%  filter(run == 1) %>% select(epoch, image_name, angle, hit)
testKlein
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial))
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial)) %>%
filter(angle == "10")
knitr::opts_chunk$set(echo = TRUE)
testKlein %>% group_by(epoch, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(image_name),
accuracy = max(nr_hits)/max(trial)) %>%
filter(angle == "10") %>% slice_tail()
knitr::opts_chunk$set(echo = TRUE)
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial)) %>%
slice_tail)
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
slice_tail() %>% select(angle, trial, accuracy)
knitr::opts_chunk$set(echo = TRUE)
# Nach Epochs und angle aufteilen dann acc berechnen
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial)) %>%
slice_tail() %>% select(angle, trial, accuracy))
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
class(run_seperated_test)
knitr::opts_chunk$set(echo = TRUE)
# Assuming `my_list` is your list of lists
write.csv(do.call(rbind, my_list), file = "my_data.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Assuming `my_list` is your list of lists
write.csv(do.call(rbind, run_seperated_test), file = "my_data.csv", row.names = FALSE)
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
run_seperated_test[1]
# Assuming `my_list` is your list of lists
write.csv(do.call(rbind, run_seperated_test[1]), file = "my_data.csv", row.names = FALSE)
# Assuming `my_list` is your list of lists
write.csv(do.call(rbind, run_seperated_test[1]), file = "my_data.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Assuming `my_list` is your list of lists
write.csv(do.call(rbind, run_seperated_test[1]), file = "1my_data.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("my_data_", i, ".csv")
write.csv(do.call(rbind, list_of_lists[[i]]), file = file_name, row.names = FALSE)
}
knitr::opts_chunk$set(echo = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("my_data_", i, ".csv")
write.csv(do.call(rbind, run_seperated_test[[i]]), file = file_name, row.names = FALSE)
}
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
# Load reticulate package
library(reticulate)
library(tidyverse)
# Set Python environment
use_condaenv("C:/Users/Laxchan/anaconda3/envs/lax", required = TRUE)
# Ensure reticulate is working
py_config()
knitr::opts_chunk$set(echo = TRUE)
#read data
rohdaten <- read_csv("vgg16_.csv")
#preprocess data, no calculation yet. creating angle category to filter easier
daten <- rohdaten %>% mutate(image_name= basename(image_name),
angle = str_remove(str_extract(rohdaten$image_name, "_-?\\d+(?=\\.png)"), "_"),
hit = if_else(ground_truth == prediction, 1, 0)) %>%
group_by(phase)
# interessant, train bleibt bei 30 und -30
testdaten <- daten %>% filter(phase == "test") %>% ungroup()
traindaten <- daten %>% filter(phase == "train") %>% ungroup()
#nest into epochs, disregard runs (wie durchschnitt von run)
epochs <- testdaten %>% group_by(epoch) %>% nest()
epochs$data
# Nach Epochs und angle aufteilen dann acc berechnen und von jedem angle accuracy vom epoch
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial)) %>%
slice_tail() %>% select(angle, trial, accuracy))
class(run_seperated_test)
run_seperated_test[1]
knitr::opts_chunk$set(echo = TRUE)
run_seperated_test
knitr::opts_chunk$set(echo = TRUE)
write.csv((run_seperated_test[[1]]), file = "file_name", row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
write.csv((run_seperated_test[[1]]), file = "file_name.csv", row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE))
knitr::opts_chunk$set(echo = TRUE)
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("my_data_", i, ".csv")
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
# Load reticulate package
library(reticulate)
library(tidyverse)
# Set Python environment
use_condaenv("C:/Users/Laxchan/anaconda3/envs/lax", required = TRUE)
# Ensure reticulate is working
py_config()
knitr::opts_chunk$set(echo = TRUE)
#read data
rohdaten <- read_csv("vgg16_.csv")
#preprocess data, no calculation yet. creating angle category to filter easier
daten <- rohdaten %>% mutate(image_name= basename(image_name),
angle = str_remove(str_extract(rohdaten$image_name, "_-?\\d+(?=\\.png)"), "_"),
hit = if_else(ground_truth == prediction, 1, 0)) %>%
group_by(phase)
# interessant, train bleibt bei 30 und -30
testdaten <- daten %>% filter(phase == "test") %>% ungroup()
traindaten <- daten %>% filter(phase == "train") %>% ungroup()
#nest into epochs, disregard runs (wie durchschnitt von run)
epochs <- testdaten %>% group_by(epoch) %>% nest()
epochs$data
# Nach Epochs und angle aufteilen dann acc berechnen und von jedem angle accuracy vom epoch
run_seperated_test <-  map(epochs$data, \(x) group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits)/max(trial)) %>%
slice_tail() %>% select(angle, trial, accuracy))
class(run_seperated_test)
run_seperated_test
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
mutate(data = run_seperated_test, epoch = i)
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
map(run_seperated_test, \(x) mutate(x, epoch = i))
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
map(run_seperated_test, \(x) mutate(x, epoch = i))
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
map(run_seperated_test, \(x) mutate(x, epoch = i))
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
map(run_seperated_test, \(x) mutate(x, epoch = i))
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#making csv for every epoch
for (i in seq_along(run_seperated_test)) {
file_name <- paste0("epoch_", i, ".csv")
run_seperated_test <- map(run_seperated_test, \(x) mutate(x, epoch = i))
write.csv((run_seperated_test[[i]]), file = file_name, row.names = TRUE)
}
load("C:/Users/Laxchan/Downloads/openalex-group-by-20250308.csv")
load("C:/Users/Laxchan/Downloads/openalex-group-by-20250308.csv")
getwd()
dir()
getwd()
library(tidyverse)
read_csv("openalex-group-by-20250308.csv")
dir
read_csv("openalex-group-by-20250308.csv")
setwd("C:/Users/Laxchan/OneDrive - Universitaet Bern/Dokumente")
read_csv("openalex-group-by-20250308.csv")
read_csv("daten.csv")
load("~/daten.csv.csv")
load("~/daten.csv")
data <- read.csv("~/daten.csv")
View(data)
data <- read.csv("~/daten.csv", header = "jahr", "count")
data <- read.csv("~/daten.csv", header = c("jahr", "count")
data
View(data)
("jahr", "count")
data <- read.csv("~/daten.csv", header = c("jahr", "count")
data <- read.csv("~/daten.csv", header = c("jahr", "count")
data <- read.csv("~/daten.csv", header = c("jahr", "count"))
data <- read.csv("~/daten.csv"", header = c("jahr", "count"))")
data <- read.csv("~/daten.csv")
View(data)
library(tidyverse)
#read data
daten_namen <- dir(pattern = "*.csv")
daten_namen
cwd()
wd()
getwd()
setwd("C:\\Masterthesis_unibe\\my_work\\dnns\\Blender_Auswertung\\blender_first")
#read data
daten_namen <- dir(pattern = "*.csv")
daten_namen
daten_namen[1]
alex <- daten_namen[1]
source("~/.active-rstudio-document", echo=TRUE)
rohdaten <- read.csv(alex)
rohdaten
alex %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase)
alex %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase)
alex
alex <- read.csv(alex)
alex %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase)
alex %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase) %>% select(-run)
alex <- alex %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase) %>% select(-run)
alex
alex %>% filter(phase == "train")
training-alex %>% filter(phase == "train")
training <- alex %>% filter(phase == "train")
test <- alex %>% filter(phase == "test")
test %>% group_by(epoch)
test %>% group_by(epoch) %>% nest()
test_nest <- test %>% group_by(epoch) %>% nest()
})
test_nest %>%
group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
test_nest$data %>%
group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
map(test_nest$data, \(x)
group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
)
test_nest <- test %>% group_by(epoch) %>% nest()
View(test_nest)
epochs
test
View(test)
View(training)
View(test_nest)
test_nest$data
x <- test_nest$data
View(x)
x <- test_nest$data$1
x <- test_nest$data[1]
View(x)
show(x)
map(test_nest$data, \(x)
group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
)
test
x
x[1]
x[1] %>% filter(angle =="-10")
x[1] %>% as.data.frame()
x[1] %>% as.data.frame() %>% filter(angle == "-10")
x[2] %>% as.data.frame() %>% filter(angle == "-10")
x[2] %>% as.data.frame() %>% filter(angle == "-10")
x[2]
x[2]
x
test_nest$data[1] %>% as.data.frame() %>% filter(angle == "-10")
test_nest$data[2] %>% as.data.frame() %>% filter(angle == "-10")
test_nest$data[3] %>% as.data.frame() %>% filter(angle == "-10")
test_nest$data[4] %>% as.data.frame() %>% filter(angle == "-10")
test_nest
map(test_nest$data, \(x)
group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
)
test_nest$data
map(test_nest$data, \(epoch) {
map(epoch$data, \(x) {
x %>%
group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
})
})
map(test_nest$data, \(x)
group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
)
map(test_nest$data, \(x)
group_by(x, angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(angle),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#read data
daten_namen <- dir(pattern = "*.csv")
daten_namen
knitr::opts_chunk$set(echo = TRUE)
#read data
daten_namen <- dir(pattern = "*.csv")
rohdaten <- map(daten_namen, \(x) read.csv(x) %>%
select(-run))
names(rohdaten) <- tools::file_path_sans_ext(daten_namen)
#preprocess data, no calculation yet. creating angle category to filter easier
daten <- map(rohdaten, \(x) {
x %>%
mutate(
image_name = basename(image_name),
angle = str_extract(image_name, "(?<=z_)-?\\d+(?=\\.png)"),
hit = if_else(ground_truth == prediction, 1, 0)
) %>%
group_by(phase)
})
# Extract Train and Test
traindaten <- map(daten, \(x) filter(x, phase == "train") %>% ungroup())
testdaten <- map(daten, \(x) filter(x, phase == "test") %>% ungroup())
#nest into epochs, disregard runs (wie durchschnitt von run)
epochs <- map(testdaten, \(x) group_by(x, epoch) %>% nest())
## Nach Angles trennen und nesten
results_nested <- map(epochs, \(arch) {
map(arch$data, \(x) {
x %>%
group_by(angle) %>%
mutate(nr_hits = cumsum(hit),
trial = seq_along(phase),
accuracy = max(nr_hits) / max(trial)) %>%
slice_tail(n = 1) %>%
select(angle, trial, accuracy)
})
})
output_names <- paste0(tools::file_path_sans_ext(daten_namen), "_accuracies.csv")
# For each architecture (5 total)
for (i in seq_along(results_nested)) {
# Get all epochs for this architecture
epochs_list <- results_nested[[i]]
# Add an epoch column to each epoch data frame
epochs_list <- map2(epochs_list, seq_along(epochs_list), \(df, epoch_num) {
mutate(df, epoch = epoch_num)
})
# Combine all epochs into one data frame
architecture_df <- bind_rows(epochs_list)
write.csv(architecture_df, file = output_names[i], row.names = FALSE)
}
